TriangulateSimplePolygon
FPlanarPolygonMeshGenerator
일정 이상 곡선이 발생해야 버텍스 추가로 최적화
지나간 흔적은 mesh bool subtract가 아니라 머티리얼로 구현
자기 흔적에 닿으면 죽으니까 새 영토는 기존 영토에 다시 충돌할 때만 발생함 새 영토는 기존 영토의 두 만나는 점 사이의 점들을 전부 지우고 새 path로 교체한 것과 같음

1. 본인 트랙 렌더링
2. 영토 렌더링
3. 영토 생성

UDynamicMeshComponent의 함수들을 사용하여 영역 버텍스 버퍼 업데이트 시 좀 더 효율적으로 할 수 있음
Mesh 생성 관련 함수들 MeshPrimitiveFunctions.h에 들어있음
MeshSelectionFunctions.h의 함수들로 메시의 일부를 선택하여 MeshTransformFunctions.h로 옮길 수 있음
커스텀 MeshGenerator 만들어서 마지막 face를 polygroup 0번으로 하도록 하자






1. PolygonBoundary의 segment list를 다른 클래스로 분리해서 tracer에서도 사용
2. 충돌체크 클래스 만들어서 매 프레임 충돌체크 -> tracer 껐다켰다 / 사망체크 / 영토추가
3. 트레이스 남의 영토 지나가면 영토 갈라져 보이는 기능
4. 미니맵



1. 영역과 트레이스 충돌 체크는 중심 기준
2. 트레이스 시작 및 종료 시 붕 떠 있는 버텍스는 영역에 내린 수선의 발로 연결해준다





1. 각종 버그 수정
2. PolygonBoundary 클래스가 필요 없음 LoopedSegment로 대체





1. (임시 기능) 실행 했을 때 내 영역과 다른 영역이 존재 해야 함
2. 영역에 컬러 입히기 / 다른 영토 깎아내는 거 구현
3. 멀티플레이 게임 모드 구현 - 신규/난입 시 랜덤한 팀에 배정, 영역 및 trace 레플리케이션이 완료되면 내 캐릭터를 스폰
4. 멀티플레이 게임 규칙 구현
    a. 내 trace가 팀원의 의한 영역 확장에 의해 가려지는 경우 처리
    b. 내 trace의 시발점이 적에 의해 없어지는 경우 사망
    c. 자살 시 사망
    d. 내 trace를 적이 건드리면 사망
5. 최소한의 UI 구현
6. 미니맵 구현
7. 조작 구현 (optional)




Tracer의 책임
1. 다이나믹 메시 컴포넌트 생성 및 컨피그 (머티리얼 등)
2. 매 프레임 버텍스를 생성해서 다이나믹 메시에 생성
-> 데디에서 버텍스를 받아오기 위해서는 2번 책임을 별도의 클래스로 분리할 필요가 있음


TracerAreaExpander의 책임
1. Tracer의 2번 책임을 컨트롤 (영역 안에 플레이어가 위치하는지에 껐다 킴)
2. Tracer가 꺼질 때마다 Tracer가 차지하는 영역을 Area에 더함
-> 데디에서만 이루어져야 하므로 컴포넌트는 데디에만 붙이면 됨


ReplicatedAreaExpander
1. 그냥 데디에서 area 받아와서 area에 더하면 됨