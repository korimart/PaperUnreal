TriangulateSimplePolygon
FPlanarPolygonMeshGenerator
일정 이상 곡선이 발생해야 버텍스 추가로 최적화
지나간 흔적은 mesh bool subtract가 아니라 머티리얼로 구현
자기 흔적에 닿으면 죽으니까 새 영토는 기존 영토에 다시 충돌할 때만 발생함 새 영토는 기존 영토의 두 만나는 점 사이의 점들을 전부 지우고 새 path로 교체한 것과 같음

1. 본인 트랙 렌더링
2. 영토 렌더링
3. 영토 생성

UDynamicMeshComponent의 함수들을 사용하여 영역 버텍스 버퍼 업데이트 시 좀 더 효율적으로 할 수 있음
Mesh 생성 관련 함수들 MeshPrimitiveFunctions.h에 들어있음
MeshSelectionFunctions.h의 함수들로 메시의 일부를 선택하여 MeshTransformFunctions.h로 옮길 수 있음
커스텀 MeshGenerator 만들어서 마지막 face를 polygroup 0번으로 하도록 하자






1. PolygonBoundary의 segment list를 다른 클래스로 분리해서 tracer에서도 사용
2. 충돌체크 클래스 만들어서 매 프레임 충돌체크 -> tracer 껐다켰다 / 사망체크 / 영토추가
3. 트레이스 남의 영토 지나가면 영토 갈라져 보이는 기능
4. 미니맵



1. 영역과 트레이스 충돌 체크는 중심 기준
2. 트레이스 시작 및 종료 시 붕 떠 있는 버텍스는 영역에 내린 수선의 발로 연결해준다





1. 각종 버그 수정
2. PolygonBoundary 클래스가 필요 없음 LoopedSegment로 대체





1. (임시 기능) 실행 했을 때 내 영역과 다른 영역이 존재 해야 함
2. 영역에 컬러 입히기 / 다른 영토 깎아내는 거 구현
2-1. Tracer Mesh Generator와 Path Generator를 분리한다
2-2. Path Generator에서 새 Path 생성 시마다 충돌 검사를 한다 (CollisionState?)
2-3. 충돌 검사를 이미 다 해놨으므로 영역에 걸치는 segment들이 시작과 끝이 되는 Path를 가지고 Difference를 한다.
3. 멀티플레이 게임 모드 구현 - 신규/난입 시 랜덤한 팀에 배정, 영역 및 trace 레플리케이션이 완료되면 내 캐릭터를 스폰
3-1. Tracer replication 구현
3-2. Area replication 구현
4. 멀티플레이 게임 규칙 구현
    z. 신규 영역 선포를 위해 비어있는 랜덤 위치 파악하기 (비어있는 곳을 찾는 알고리즘 생각해보기)
    a. 내 trace가 팀원의 의한 영역 확장에 의해 가려지는 경우 처리 -> tracer가 여러 부분으로 쪼개질 수 있음 이거 핸들링
    b. 내 trace의 시발점이 적에 의해 없어지는 경우 사망
    c. 자살 시 사망
    d. 내 trace를 적이 건드리면 사망
5. 최소한의 UI 구현
6. 미니맵 구현
7. 조작 구현 (optional)




Tracer의 책임
1. 다이나믹 메시 컴포넌트 생성 및 컨피그 (머티리얼 등)
2. 매 프레임 버텍스를 생성해서 다이나믹 메시에 생성
-> 데디에서 버텍스를 받아오기 위해서는 2번 책임을 별도의 클래스로 분리할 필요가 있음


TracerAreaExpander의 책임
1. Tracer의 2번 책임을 컨트롤 (영역 안에 플레이어가 위치하는지에 껐다 킴)
2. Tracer가 꺼질 때마다 Tracer가 차지하는 영역을 Area에 더함
-> 데디에서만 이루어져야 하므로 컴포넌트는 데디에만 붙이면 됨


ReplicatedAreaExpander
1. 그냥 데디에서 area 받아와서 area에 더하면 됨








1. 멀티플레이 게임 규칙 구현
    x. actor 스폰 시 그 당시의 property들은 initial bunch에 모두 들어가므로 wait for component가 필요 없는 곳이 있을 수 있음
    y. 현재 Tracer와 Area의 Replication이 atomic 하지 않을 가능성이 있음 확인 필요
    z. 신규 영역 선포를 위해 비어있는 랜덤 위치 파악하기 (비어있는 곳을 찾는 알고리즘 생각해보기)
    a. 내 trace가 팀원의 의한 영역 확장에 의해 가려지는 경우 처리
    -> tracer가 여러 부분으로 쪼개질 수 있음 이 때 TracerToArea Conversion이 다수 발생 가능 그래서 현재 TracerPathEvent로는 처리 불가능
    -> Slashing이 다수 발생 가능 현재 방식으로 처리 불가능 수정해야 됨
    -> 충돌 체크가 한 순간에 너무 많이 발생할 수 있는데 spatial partitioning으로 하면 z도 좀 더 쉽게 처리할 수 있을 것 같다.
    b. 내 trace의 시발점이 적에 의해 없어지는 경우 사망
    c. 자살 시 사망
    d. 내 trace를 적이 건드리면 사망
2. 최소한의 UI 구현
3. 미니맵 구현
4. 조작 구현 (optional)






1. 멀티플레이 게임 규칙 구현
    z. 신규 영역 선포를 위해 비어있는 랜덤 위치 파악하기 (비어있는 곳을 찾는 알고리즘 생각해보기)
    a. 내 trace를 적이 건드리면 사망
    b. 내 trace의 시발점이 적에 의해 없어지는 경우 사망 (외출해있는 경우에는 a랑 똑같음. 내가 서 있는 영역이 사라지는 경우 생각)
    c. 자살 시 사망
2. 최소한의 UI 구현
3. 미니맵 구현
4. 조작 구현 (optional)







1. 멀티플레이 게임 규칙 구현
    a. 내 trace를 적이 건드리면 사망
    b. 내 trace의 시발점이 적에 의해 없어지는 경우 사망 (외출해있는 경우에는 a랑 똑같음. 내가 서 있는 영역이 사라지는 경우는 구현해야 됨)
    c. 자살 시 사망
    d. 캐릭터 스폰시의 플로우는 다음과 같아야 함
        1. 클라이언트에서 장비 선택. 선택 과정은 서버가 개입 안 하게 클라에서 액터 스폰해서 처리 -> 서버에 전송
        2. 해당 클라의 player state에 착용 장비를 기록해서 모든 클라가 받게 함
        3. 캐릭터가 스폰되면 player state에서 장비를 가져와 로드 및 설정. 변경도 대응하게 처리.
        4. 장비의 로드가 완료될 때까지 뭘 표시해야 될 지 모르겠음
        5. 기본 캐릭터 표시하면 스폰할 때 순간적으로 기본이 보였다가 착용이 보일 듯 함
        6. 모든 클라가 로드를 완료할 때까지 기다리는 메카니즘을 쓰면 모든 클라가 로드 완료할 때까지 새 유저는 접속을 못함 
        7. 6번에 타임아웃을 맥이면 타협이 될 듯 한데 일단 5번이 간단하니까 5번으로 구현
2. 최소한의 UI 구현
3. 미니맵 구현
4. 캐릭터 선택/트레이서 선택 구현
5. 스팀 출시?




0. 싱글 게임 규칙 구현
    a. kill z 없애고 커스텀 kill z 구현
1. 멀티플레이 게임 규칙 구현
    a. 최소 인원이 들어올 때까지 대기 (스펙테이터가 관전을 마치고 준비 완료를 보내는 기준으로 인원수 체크)
    b. 방장의 방 설정이 완료될 때까지 대기 - 최대 몇 팀/각 팀 최대 인원수/제한 시간 설정
    c. 들어올 때까지는 캐릭터 스폰해주고 자유행동
    d. 들어오면 게임 시작
    e. 유저가 모두 나가서 팀에 인원이 없어지면 해당 에리어 파괴
    f. 제한 시간이 지나거나 더 이상 에리어를 스폰할 자리가 없으면 게임 종료
    g. 결과창
    h. 처음부터 반복
2. coroutine 에러 핸들링 abort를 기본으로 변경
3. live data weak pointer handling 방식 변경 observe/create stream valid 버전 분리, raw 접근 제한
-> derived class로 자꾸 만들지 말고 type traits로 관련 정보 look up 하게 구현하자
4. value streamer 제거, byte streamer 제거 및 tracer path 방식 좀 변경 <-- 크래시 발생하므로 1순위
5. TracerToAreaConverter가 live data 콜백이 원본을 수정하는 circular 관계이므로 교통정리하는 클래스 구현




1. Player Controller에 loop에서 UObject에 co_await 계속 걸어서 weak list에 pawn 계속 들어가는 문제 수정
-> 문제가 두 개임. 1. 똑같은 거 여러 번 넣을 수 있음 2. 넣기를 원치 않는 걸 안 넣는 방법이 없음
1. WithError<> 구현
2. line mesh component replication 구현 (과정에서 byte streamer / value streamer 제거)
3. TracerToAreaConverter가 live data 콜백이 원본을 수정하는 circular 관계이므로 교통정리하는 클래스 구현
4. 게임 시작 전 자유행동 구현
5. 방설정/장비설정/결과창 UI 구현
6. co_await에 lvalue를 허용하도록 구현?
7. weak coroutine labmda capture 저장 방식 변경 필요
7-1. context를 unique ptr로 만들지 않고 promise_type의 constructor를 활용해서 설정할 수 있음
7-2. unique ptr에 캡쳐하지 않고 fminimal coroutine 안에서 실행하면 더 깔끔함
8. stencil buffer를 사용해서 가장 늦게 그려진 tracer가 가장 위에 그려지도록
9. shareable live data? -> replace state tracker?
10. game rule이 pawn의 uclass를 받는 대신 팩토리를 받도록 수정
11. refactor enhanced input handling in player controller